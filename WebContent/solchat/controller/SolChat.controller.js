sap.ui.define(['sap/ui/core/mvc/Controller', 'sap/m/Button',
  'sap/m/FeedInput', 'sap/ui/model/json/JSONModel', 'sap/m/Text',
  'sap/m/MessageToast', 'sap/ui/core/format/DateFormat'
], function(
  Controller, Button, FeedInput, JSONModel, Text, MessageToast,
  DateFormat) {
  "use strict";

  return Controller.extend("solchat.controller.SolChat", {

      var broker = null;

      /**
       * Called when a controller is instantiated and its View controls (if
       * available) are already created. Can be used to modify the View before
       * it is displayed, to bind event handlers and do other one-time
       * initialization.
       *
       * @memberOf solchat.SolChat
       */
      onInit: function() {

        //create an instance of a new broker
        broker = new PubSubPlusBroker();
      },

      /**
       * Similar to onAfterRendering, but this hook is invoked before the
       * controller's View is re-rendered (NOT before the first rendering!
       * onInit() is used for that one!).
       *
       * @memberOf solchat.SolChat
       */
      // onBeforeRendering: function() {
      //
      // },
      /**
       * Called when the View has been rendered (so its HTML is part of the
       * document). Post-rendering manipulations of the HTML could be done
       * here. This hook is the same one that SAPUI5 controls get after being
       * rendered.
       *
       * @memberOf solchat.SolChat
       */
      // onAfterRendering: function() {
      //
      // },
      /**
       * Called when the Controller is destroyed. Use this one to free
       * resources and finalize activities.
       *
       * @memberOf solchat.SolChat
       */
      // onExit: function() {
      //
      // }

      /**
       * Called when the user decides to connect to a topic.
			 * This method invokes the appropriate connect() method from
			 * the broker, performing various setup actions.
			 * Users are visually notified of a successful/failed connection
			 * attempt.
			 *
			 * @param oEvent
			 *              Event generated by the control that invoked this function.
			 * @return void
       */
      onConnect: function(oEvent) {

        //execute the broker's connection logic
        var bConnected = false;
        bConnected = broker.connect();

        if (bConnected) {
          // Popup a message indicating we've connected & title
          // the window to match the topic name
          MessageToast.show("Connected to '" + broker.channel + "'!");
          this.byId("chatPage").setTitle(broker.channel);

					//setup the chat area
					this.setupChatFeed();
        } else {
          MessageToast.show("Connection to '" + broker.channel + "' failed!");
        }
      }
    },


    /**
     *Performs various housekeeping items related to the
     *chat UI, specifically:
     * -assocating a data model with the chat area
     * -displaying the chat area.
		 * Note that associating a fresh data model clears
		 * any previous chat entries.
		 *
		 * @param
		 *        None
		 * @return
		          void
     **/
    setupChatFeed: function() {
      // define an empty data model for our chat window. updates
      // to this model get reflected on screen as new messages.
      var oChatModel = new JSONModel({
        "EntryCollection": []
      });

      // assign this model to our chat feed
      this.byId("feedList").setModel(oChatModel);

      // show the chat text-input box
      this.byId("feedInput").setVisible(true);
    }

    /**
     * Updates the chat window with the new post and sends it off to the
     * message broker.
     */
    onFeedInputPost: function(oControlEvent) {

      // Get the input text posted by the
      // user
      var sValue = oControlEvent.getParameter("value");

      // TODO: Send the input to the message broker
      // Explode if there is an error
      bSent = send(sValue);

      if (bSent) {

        // update the chat window
        this.setChatMessage(sValue);
      } else {
        MessageToast.show("Failed to send message!");
      }
    },

    /**
     * Updates the chat window with a given text entry.
     *
     * Accepts: sChatText - Text string to be show as a message
     * Returns: nothing
     */
    setChatMessage: function(sChatText) {

      // Get the current timestamp in a human-readable format
      var oFormat = DateFormat.getDateTimeInstance({
        style: "short"
      });
      var oDate = new Date();
      var sDate = oFormat.format(oDate);

      // Convert the message to a JSON
      // object for our chat model
      var oEntry = {
        Text: sChatText,
        Timestamp: sDate
      };

      // get the data model of the Chat
      // list control
      var oChatModel = this.byId("feedList").getModel();

      // Put the new message on top of the
      // message stack
      var aEntries = oChatModel.getData().EntryCollection;
      aEntries.unshift(oEntry);

      // reset the Chat window's model to
      // our updated message stack
      oChatModel.setData({
        EntryCollection: aEntries
      });
    },

    /**
     * This function launches the Login dialog that
     * allows a user to RESTfully authenticate against
     * PubSub+.
     */
    onShowLoginDialog: function(oEvent) {
      this.byId("LoginDialog").open();
    },

    /**
     * Calls the method responsible for executing the actual
     * RESTful login call to PubSub+. Once the user enters their
     * username/password into the Login dialog and presses the
     * 'Login' button, this method is fired which delegates the
     * actual authentication behavior to a separate function.
     * The return value of said function determines if the user is
     * allowed to continue/"login".
     *
     */
    onAuthenticate: function(oEvent) {

      //get a reference to the username & password entered
      //by the user.
      var sUsername = this.byId("username").getValue();
      var sPassword = this.byId("password").getValue();

      //TODO: Authenticate against the RESTful auth-service
      //exposed by PubSub+.
      var bAuthenticated = false;
      bAuthenticated = authenticate(sUsername, sPassword);

      if (bAuthenticated) {
        MessageToast.show("User '" + sUsername + "' authenticated!");
        this.byId("LoginDialog").close();
      } else {
        MessageToast.show("Failed to authenticate user '" + sUsername.getValue() + "'!");
      }
    }
  });
});
